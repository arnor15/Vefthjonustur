// rendered on server
public ActionResult bla() {
    return View(new ViewModel());
}

// rendered on client
public ActionResult bla() {
    return Json(new ViewModel(), JsonBehavior.AllowGet);
}


/*
 * rest service
*/

/records
/records/75
/records/75/songs/842/lyrics

/records
/songs
/performers

(ekki bua til api sem er svona: /getrecords)
HTTP Verbs bydur upp a GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD, ...
hafa frekar resource-id /records

        /records                /records/75
GET     skilar lista            skilar staki
POST    byr til nyja plotu      X
PUT     X                       
DELETE  eydir lista             eydir staki
PATCH   X                       breytir staki (ad hluta)


Ef GET a 75 er ekki til, tha kemur til sogunnar HTTP Status Codes (404) = https://http.cat
200 = OK
201 = Created (fyrir post)
204 = No Content
400 = Bad Request
401 = Unauthorized
403 = Forbidden
404 = Not Found
500 = Internal Server Error


/*
 * ASP.NET Core
*/
// keyra thetta i command linu
dotnet new -t web
// restore-ar nuget
dotnet restore
dotnet build
dotnet run

nyjan controller: RecordsController.cs

setja upp postman

laera um versioning (Troy Hunt)

I stad thess ad setja [Route("api/courses/24")] a IActionResult, tha get eg notad nafnid sem er sett a controllerinn og baett bara vid:
[Route("{id}:int")]

Ekki nota baedi [HttpGet("{id}")] og [Route("{id}:int")]

Skjala forritid med:
/// <summary>
///
/// </summary>
fyrir ofan controller og foll
sja swagger.io

unit testa business logic, i services.

Gogn sem API skilar: -> DTO
Gogn sem Api tekur inn: -> ViewModel
Klasar sem mappast vid toflu: -> Entity

Interface er klasi med helling af follum en engri utfaerslu
Snidugt ad skipta Service upp i Implementation og Interfaces

throw exception fra service og catcha i controller, og returna http status koda thar.


nyja moppu i services sem heitir Exceptions og inni i Exception ad bua til:
AppObjectNotFoundException()
using System;
public class AppObjectNotFoundException : ApplicationException { // eda Exception
    
}

og i service er tha
throw new AppObjectNotFoundException(message);

var course = _db.Courses
            .Select(x => new CourseDetailsDTO {})
            .SingleOrDefault(x => x.Name == name);


left outer join tekur null fyrirbaeri med i linq
inner join = join t in ttt on t.id equals id
left outer join = joint t in ttt where t.id equals into typpi

setja [ForeignKey("")] fyrir ofan virtual i entity

[FromBody] er must! sem parameter

mkdir tests
dotnet new -t xunittest

using System;
using Xunit;

dotnet test

windows
[TestClass]
[TestInitialize]
[TestMethod]

left outer join a main teacher, til ad fa einnig null tho ad thad se enginn kennari

XML documentation:
///<param name="model">The data which indicates which person should be added as a teacher, and in what role</param>
public IActionResult blabla(AddTeacherViewModel model){}

bua til interface fyrir AppDataContext = IDBContext

Testinitializer keyrir a undan ollum follum i hvert einasta skipti.


var courseList = Builder<Course>.CreateListOfSize(10)
                        .TheFirst(6).With(x => x.Semester = "20153")
                        .TheLast(4).With(y => y.Semester = "20163")
                        .Build().ToList();


til ad fa watch til ad virka, tha setur madur i project.json:
"tools": {
    "Microsoft.DotNet.Watcher.Tools": "1.0.0-preview2-final"
    }


i stadinn fyrir ModelState.IsValid, ad vera tha frekar med:
CourseAPIValidation clasa og kalla sidan a hann i controllerinum med:
CourseAPIValidation.Validate(model);

setja a filter fyrir exception handling
bua til errorcodes clasa sem er constant fyrir error koda
bua til javascript fyrir clientinn sem breytir error kodanum i ensku, isl og spaensku.
Hafa thetta i Exceptions file-num i services



